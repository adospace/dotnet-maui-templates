What's new in ver. 3.0.0:
-------------------------
Templates updated for .NET 8 Preview 1.

Supported values for target framework parameter, can be specified with --framework / -f

net6.0
net7.0 (the default value)
net8.0

Examples:

dotnet new mauiapp -f net8.0 -o MyApp

dotnet new mauiclasslib -f net8.0 -o MyLib

dotnet new sharedclasslib -f net8.0 -o MyApp.UI

v2.4.1:

1. Short name for Partial Class (C#) item template is now renamed as class-cs to avoid conflict with .NET SDK Class template (available from v7.0.200).

dotnet new class-cs -n BaseViewModel

2. While creating a .NET MAUI APP, Base framework is now an option for target-platform parameter

Will be auto included when the target-platform value is set to All (the default value, if not supplied)

dotnet new mauiapp -o MyApp -tp Mobile Base

3. An item template for Shell definition in C#

dotnet new maui-shell-cs -n AppShell -p:na MyApp

v2.4.0:

1. CommunityToolkit.Maui.Markup NuGet package bumped to v3.0.0 that supports TypedBindings

2. Introduced a new item template for creating a C# class (partial) from CLI

dotnet new class -n BaseViewModel

Note:

Auto binding the project's RootNamespace as the namespace for newly created class type is supported only on .NET 7 SDK or later.

While running on earlier SDK versions, it has to be manually modified.

And due to the limitation in the templating engine, only the RootNamespace would get added, need to manually adjust for sub-folders, if any.

v2.3.1:

CommunityToolkit.Maui.MediaElement NuGet package bumped to v1.0.1 with the explicit WindowsAppSDK reference removed.

v2.3.0:

1. Ability to add reference to CommunityToolkit.Maui.MediaElement NuGet package and configure it in startup pipeline for playing audio/video in a .NET MAUI app

2. Dependent packages have been updated to reference latest stable version

CommunityToolkit.Maui - v4.0.0
CommunityToolkit.Mvvm - v8.1.0

v2.2.0:

1. Template package updated to support .NET 7 SR1 (v7.0.52).

2. Base framework is also included as a target (net6.0/net7.0) to .NET MAUI App project template when the target-platform is set to All.

3. To create a XAML-only resource dictionary template, include either --xaml-only (-xo) or --no-code-behind (-ncb) parameter.

v2.1.3:

The target-platform parameter is now updated as a multi-choice value. Can be opted-in according to the need.

And little housekeeping to improve the reliability of the templates.

v2.1.1:

1. Template package updated to support newly released .NET 7 NuGet dependencies.

2. For App project targeting .NET 7, option to add and configure Maui Foldable NuGet package.

Note: If the project target .NET 6, selecting the Foldable/Maps option will NOT have any impact.

v2.1.0:

Template package updated to support .NET 7 GA release.

v2.0.3:

1. A parameter named target-platform has been introduced that takes any one of the following values (with All being the default value).

All - Targets all possible .NET MAUI supported platforms.
Android - Targets Android platform.
iOS - Targets iOS platform.
macOS - Targets macOS platform via Mac Catalyst.
Windows - Targets Windows platform.
Tizen - Targets Tizen platform.
Mobile - Targets Android and iOS platforms.
Desktop - Targets Windows and macOS platforms.
Apple - Targets iOS and macOS platforms.

dotnet new mauiapp --target-platform Mobile

dotnet new mauiapp -tp Android

v2.0.2:

Android targetSdkVersion set in accordance with the framework version selected.

.NET 7 - targetSdkVersion 33

.NET 6 - targetSdkVersion 31

v2.0.1:

Templates have been updated to support .NET MAUI on .NET 7 (RC2 - Preview release).

v2.0.0:

1. A parameter named framework has been introduced that takes either net6.0 or net7.0 as its options (with net7.0 being the default value).

dotnet new mauiapp --framework net6.0

dotnet new mauiapp -f net7.0

2. For App project targeting .NET 7, option to add and configure Maui Maps NuGet package.

Note: If project target .NET 6, selecting the Maps option will NOT have any impact.

Join me on Developer Thoughts (https://egvijayanand.in/), an exclusive blog for articles on .NET MAUI and Blazor.
